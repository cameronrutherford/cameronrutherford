---
title: "Core"
filters:
    - include-code-files
format:
    html:
        default: true
        toc: true
        toc-depth: 4
---

Note that I try and keep any platform-specific notes in different files for the sake of sanity.

## Quick Start

Install [Docker](https://www.docker.com/), VSCode, and configure the [Dev Container Extension](https://code.visualstudio.com/docs/devcontainers/containers). Then using the command pallette, build the container and open this folder.

## Dev Container Configuration

I used Python as the base image, and then install Quarto in the Dockerfile:

```{.Dockerfile include="../../.devcontainer/Dockerfile"}
```

And this is my json config:

```{.json include="../../.devcontainer/devcontainer.json"}
```

Since everything is built in this fasion, I suppor using a GitHub codespace to develop as well!

TODO: Make sure codespace doesn't re-build container when using pre-built image

### postCreateCommand.sh

As you can see in the json devcontainer configuration, there is a script invoked in the postCreateCommand section. Here are it's current contents:

```{.shell include="../../.devcontainer/postCreateCommand.sh"}
```

Maybe I could debug the pre-commit config to go into the container, but often I need to be writing more documentation, and so I don't mind waiting for that by writing some things down about the changes I may have just successfully built with.

I also had aliases here for a while, but they moved into the Dockerfile for ease of use.

## Pre-Commit Configuration

Because of issues installing on Windwos and line endings getting messed up, I installed [pre-commit](https://pre-commit.com/) to fix bugs as they arised.

This is installed in the Dockerfile for you, but you can choose to install this on it's own if you wish to do so without a container. It is especially nice to avoid any platform specific bugs (see [Windows Developer Guide](windows.qmd)).

Note that because of the [postCreateCommand.sh](###postCreateCommand.sh) configuration, pre-commit takes a little to install, and might not be available immediately upon opening a terminal. Similarly, you might need to `. ~/.bashrc` in order to get aliases (which is helpful in not enabling them by default).

### .pre-commit-config.yml

Inspired by https://gdevops.gitlab.io/tuto_git/tools/pre-commit/repos_hooks/repo_pre_commit_hooks/mixed-line-ending/mixed-line-ending.html:

```{.YAML include="../../.pre-commit-config.yaml"}
```

Above is the YAML config, and assuming you have pre-commit installed (in the dev-container or otherwise), run the following to install, and pre-commit will forever be a part of your git flow:

```bash
pre-commit install
```

Then to run manually without needing a `git commit`:

```bash
pre-commit run --all-files
```

::: {.callout-note}
You may need to use this when pre-commit pipelines are failing when not in a PR where auto-fixes can be applied.
:::

### pre-commit GitHub Actions

I run pre-commit checks in CI using a GitHub action from [https://github.com/pre-commit/action](https://github.com/pre-commit/action):

```{.YAML include="../../.github/workflows/pre-commit.yml"}
```

## Quarto Configuration

### Workflow

Build and render the project using:

```bash
quarto render && quarto preview
```

::: {.callout-tip}
This assumes that Quarto is installed, or you are running in the dev container.
:::

### Output Formats

As you can see in the sidebar, this is also rendered into raw [GitHub Flavored
Markdown](https://quarto.org/docs/output-formats/gfm.html) with Quarto.

This is configured in the top of this file's source code. Other output formats
are used for other files in this repository. In order to ensure the main GitHub
`README.md` has the correct file, we specify a `post-render` stage that copies
the file over:

```{.YAML include="../../_quarto.yml"}
```

As you can see, some other configuration is also specified, such as the [HTML theme](https://quarto.org/docs/output-formats/html-themes.html), [navbar config](https://quarto.org/docs/websites/website-navigation.html), and the output dir.

#### Supporting pdf

To support pdfs, you need a TeX installation. Here is a sample error that you get when you do not have this:

```
No TeX installation was detected.

Please run 'quarto install tinytex' to install TinyTex.
If you prefer, you may install TexLive or another TeX distribution.
```

Adding `quarto install tinytex` to the Dockerfile does not fix this (TODO: report this as a bug?), and it is very perplexing why. Instead, I followed the instructions from [Tex Live](https://www.tug.org/texlive/quickinstall.html) and just modified their sample script slightly:

```{.Dockerfile include="../../.devcontainer/Dockerfile" start-line=15 end-line=24}
```

I could have installed with the [texlive Spack package](https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/texlive/package.py), but why introduce more complication.

#### tlmgr

After installing Tex Live, I then tried rendering for the first time, and got the following error:

```
Rendering PDF
running xelatex - 1
  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)
   restricted \write18 enabled.
  entering extended mode

updating tlmgr

updating existing packages
finding package for tcolorbox.sty
> 1 package to install
> installing tcolorbox (1 of 1)
ERROR: tlmgr returned a non zero status code
You don't have permission to change the installation in any way,
specifically, the directory /usr/local/texlive/2023/tlpkg/ is not writable.
Please run this program as administrator, or contact your local admin.
tlmgr: An error has occurred. See above messages. Exiting.


Stack trace:
You don't have permission to change the installation in any way,
specifically, the directory /usr/local/texlive/2023/tlpkg/ is not writable.
Please run this program as administrator, or contact your local admin.
tlmgr: An error has occurred. See above messages. Exiting.

    at asErrorEx (file:///quarto-1.4.251/bin/quarto.js:13087:16)
    at logError (file:///quarto-1.4.251/bin/quarto.js:25798:17)
    at file:///quarto-1.4.251/bin/quarto.js:110160:13
    at eventLoopTick (ext:core/01_core.js:181:11)
```

So, I googled and updated tlmgr in the end with `tlmgr update --self && tlmgr update --all` in the Dockerfile (See [SO Post](https://stackoverflow.com/a/59851436)), as well as a line to install other extensions being used in the project:

```{.Dockerfile include="../../.devcontainer/Dockerfile" start-line=26 end-line=33}
```

#### GitHub actions and pdf

Unfortunately the first pipeline I tried with pdf backend enabled also needed some TeX engine installed - [see failed pipeline](https://github.com/CameronRutherford/CameronRutherford/actions/runs/5774702232/job/15651941247)

TODO: for now this is disabled as an output format, but needs to be fixed and checks added to pre-commit and CI.

Probably want to pre-build dev-container spec, use that as the base image for the dev-container and quarto and pre-commit pipelines (, and then finally get pre-commit installed into the container)?

### Extensions

These all are installed manually from the command line, and are not included in
the Dockerfile. This is because the whole extesion ecosystem works through the
`_extensions` directory. See [Quarto Extensions](https://quarto.org/docs/extensions/).

To install the first extension, I ran:

```bash
quarto add --no-prompt quarto-ext/include-code-files
```

#### Extension List

- [`include-code-files`](https://github.com/quarto-ext/include-code-files)
- [`qrcode`](https://github.com/jmbuhr/quarto-qrcode)
- [`quarto-confetti`](https://github.com/ArthurData/quarto-confetti)

Note that these are the only project-wide extension installed. Other custom extensions can be installed for individual documents as needed, such as for my [stem engagement presentation](../presentations/stem-engagement/presentation.qmd) where I added a blackboard theme.

### Quarto Misc

::: {.callout-note}
I included the old github markdown resume in `old_resume.qmd` in the HTML of my main resume using the following quarto snippet:

``` markdown
{{{< include <file_to_include>.qmd >}}}
```

Make sure to change to the correct file when copying for your own use.
:::

::: {.callout-tip collapse="true"}
Check out the source code for this if you haven't already in the side bar.

In order to render quarto source code without rendering it in a document, you
have to add another `{ }` to your source code, and use a markdown source comment.

I rendered the note above with this source code:

```` markdown
``` markdown
{{{ include <file_to_include>.qmd }}}
```
````

Also, you need to vary the number of backticks when starting the markdown block
compared to the source code you are commenting. I used four `\`` in rednering the
above source code comment, whereas I only used 3 in the above note

:::

::: {.callout-warning collapse="true"}
If I keep exaplaining this in markdown, it will be recursive.
Check out the source code on the right sidebar for this (and other) pages if you
 have not already. This is also partly the reason you can't self-reference a file
 and do recursion in quarto.
:::

::: {.callout-note collapse="true"}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.

You can also make collabsable sections!
:::

## GitHub Pages Configuration

There are many ways to deploy Quarto pages. You can read more about choices in
[rendering Quarto in CI](https://quarto.org/docs/publishing/ci.html#rendering-for-ci)
here. I am choosing to render locally, and simply point GitHub pages to the folder
that is stored in git. This isn't the gold standard in reproducibility, but the
trade off is that this is much faster to iterate on.

### Initial Config

I ran this initially per [the docs](https://quarto.org/docs/publishing/github-pages.html#publish-action):

```bash
quarto publish gh-pages
```

I then added a GitHub action to auto publish based on what is in the repository based on other people's publish actions:

```{.YAML include="../../.github/workflows/publish.yml"}
```
