---
title: "Setting up C++ Jupyter kernels"
filters:
    - include-code-files
format:
    html:
        default: true
        toc: true
        toc-depth: 4
---

# Requirements

Since [xeus-cling](https://github.com/jupyter-xeus/xeus-cling) requires a conda based installation (I could have used Spack to install [xeus](https://github.com/spack/spack/blob/develop/var/spack/repos/builtin/packages/xeus/package.py), but decided that would be more effort), we will use [Micromamba](https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html) and inherit from our `quarto-ci` ghcr base image.

This ended up being installed through the Dockerfile in `.devcontainer/blog-codingInterview/Dockerfile` and is available as a dev-container option:

```{.Dockerfile include="../.devcontainer/blog-codingInterview/Dockerfile"}
```

# Specifying C++ standard

Still TBD how to change which compiler is used, but this at least gives me a starting place for experimenting with C++ standards, as well as modifying the compiler used. https://xeus-cling.readthedocs.io/en/latest/build_options.html

# Running a notebook / example

Just pick the relevant C++ kernel in VSCode.

Will write JupyterLab documentation if it seems necessary to do things outside of VSCode.

# TODO

- [ ] Render this page in documentation
- [ ] Get Jupyter notebook running at all for C++ examples
- [ ] Get single Jupyter notebook rendering in Quarto
- [ ] Render content into blog section of website
- [ ] Solve some hard leetCode problems in separate notebooks
- [ ] Figure out relevant pre-commit hooks
- [ ] Pre-build container in CI (?)
- [ ] Allow usage of pre-built image
- [ ] Benchmarking / profiling of solution with comparison of solutions...
- [ ] Comapre compilers?
- [ ] Compare C++ standard versions?
- [ ] Generate feed with content in order of posting
