---
title: "Personal Website"
filters:
    - include-code-files
format: 
    gfm:
        toc: true
        toc-depth: 4
        toc-title: "Table Of Contents"
        output-file: README.md
        preview-mode: raw
    html:
        toc: true
        toc-depth: 4
---

## About

This document is generated by `personal-repo.qmd`. 

I render this using [Quarto](https://quarto.org/), and build with [VSCode](https://vscode.dev/) using a [Development Container](https://containers.dev/).

This serves as my resume, blog, and self-referential documentation!

## Quick Start

Install [Docker](https://www.docker.com/), VSCode, and configure the [Dev Container Extension](https://code.visualstudio.com/docs/devcontainers/containers). Then using the command pallette, build the container and open this folder.

## Dev Container Configuration

I used Python as the base image, and then install Quarto in the Dockerfile:

```{.Dockerfile include=".devcontainer/Dockerfile"}
```

And this is my json config:

```{.json include=".devcontainer/devcontainer.json"}
```

## Quarto Configuration

### Workflow

Build and render the project using:

```bash
quarto render && quarto preview
```

::: {.callout-tip}
This assumes that Quarto is installed, or you are running in the dev container. 
:::

### Output Formats

As you can see in the sidebar, this is also rendered into raw [GitHub Flavored 
Markdown](https://quarto.org/docs/output-formats/gfm.html) with Quarto.

This is configured in the top of this file's source code. Other output formats
are used for other files in this repository. In order to ensure the main GitHub
`README.md` has the correct file, we specify a `post-render` stage that copies
the file over:

```{.YAML include="_quarto.yml"}
```

As you can see, some other configuration is also specified, such as the [HTML
theme](https://quarto.org/docs/output-formats/html-themes.html), [navbar config]
(https://quarto.org/docs/websites/website-navigation.html), and the output dir.

### Extensions

These all are installed manually from the command line, and are not included in
the Dockerfile. This is because the whole extesion ecosystem works through the
`_extensions` directory.

To install the first extension, I ran:

```bash
quarto add --no-prompt quarto-ext/include-code-files
```

#### Extension List

- [`include-code-files`](https://github.com/quarto-ext/include-code-files)

## GitHub Pages Configuration

There are many ways to deploy Quarto pages. You can read more about choices in 
[rendering Quarto in CI](https://quarto.org/docs/publishing/ci.html#rendering-for-ci)
here. I am choosing to render locally, and simply point GitHub pages to the folder
that is stored in git. This isn't the gold standard in reproducibility, but the
trade off is that this is much faster to iterate on.

### Initial Config

I ran this initially per [the docs](https://quarto.org/docs/publishing/github-pages.html#publish-action):

```bash
quarto publish gh-pages
```

I then added a GitHub action to auto publish based on what is in the repository,
and I decided to render this website locally before publishing to make things easier:

```{.YAML include=".github/workflows/publish.yml"}
```

This method does somewhat clutter git history with updates of the website along with the files,
which isn't ideal. I think I will shift to CI builds in the future.